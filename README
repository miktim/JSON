Java 7+/Android JSON parser/generator v3.0.0-alpha, MIT (c) 2020-2024 miktim@mail.ru

Release notes:
  - Java SE 7+/Android RFC 8259 compliant package
    (see: https://datatracker.ietf.org/doc/rfc8259/?include_text=1 );
  - no external dependencies.

package org.miktim.json

Overview:

  "JSON" means text in JSON format. JSON text exchanged between systems
     MUST be encoded using UTF-8 (default charset).
  "Json" means the Java representation of a JSON object

  Class JSON.

    The class contains static functions for parsing/generating text in JSON format.
      - JSON parser converts JSON text to Java objects:
        Json object, String, Number, Boolean, null, Object[] array of listed types;
      - when the names within an object are not unique, parser stores the last value only;
      - in addition to listed types, the generator converts Java Collections to JSON arrays
        and Java Maps to Json objects. The null key is converted to a "null" member name.
        Other Java objects are converted to string representation.

      static Object fromJSON(String jsonText)
        throws IOException, ParseException;
        // parse JSON text
      static Object fromJSON(InputStream in, String charsetName) 
        throws IOException, ParseException;

      static String toJSON(Object obj) throws IOException;
        // generate JSON text as single line
      static String toJSON(Object obj, int space) throws IOException;
        // space is the number of spaces in the indentation
      static <T>T toJSON(T obj, OutputStream out, int space, String charsetName)
        throws IOException;

    Methods for converting objects supported by JSON to a Java primitive or an array of Java primitives.

      static <T> T cast(Object obj, T sample);
        // cast Java object by sample
      static <T> T cast(Object obj, Class <T> cls);
        // cast Java object by class
        
      Notes:  
        - sample must be initialized;
        - casting numbers may involve rounding or truncation;
        - casting null to a Java primitive returns corresponding initial value;
        - casting null to an array returns an empty array;
        - casting null to String returns "null";
        - casting null to other Java objects returns null;
        - casting to null returns null.

  Class Json extends LinkedHashMap<String, Object>.

    This class is a Java representation of a JSON object
    - Json members:
      Json object, String, Number, Boolean, null, Object[] array of listed types.
   
    Put, set, get notes:
    - Json object setters accept any Java object, all Java primitives and primitive arrays;
    - RFC 8259 does not recommend using Java BigDecimal and BigInteger as Json member values;
    - AVOID RECURSION!;
    - put, set methods cast Java primitives to the corresponding objects.
      Java objects and arrays are stored "as is" (as reference). 
      For example: float -> Float, int[][] -> int[][], String[] -> String[]
    - after JSON text parsing or normalization, they are stored as:
      Double, Object[]{Object[]{Long,...}, Object[]{Long,...}}, Object[] {String,...};
    - getters return null if the member does not exist.

    Constructors:
      Json(Object... members) throws IndexOutOfBoundsException;
        // members is a name,value pairs
      Json(String jsonText) throws IOException, ParseException;
      Json(InputStream inStream) throws IOException, ParseException;
        // inStream is a UTF-8 encoded JSON text

    Methods:

      String[] listNames(); // returns list of member names
      boolean exists(String memberName); // alias of the inherited containsKey()
      Object put(String memberName, Object value); // inherited
      Json set(Object memberName, Object value);   // create or replace member
      Object get(String memberName);    // inherited
      Object remove(String memberName); // inherited

      Object get(String memberName, int... indices); // returns value or array element
        throws IndexOutOfBoundsException;
      Json getJson(String memberName, int... indices)
        throws ClassCastException, IndexOutOfBoundsException;
      String getString(String memberName, int... indices)
        throws ClassCastException, IndexOutOfBoundsException;
      Number getNumber(String memberName, int... indices)
        throws ClassCastException, IndexOutOfBoundsException;
      Boolean getBoolean(String memberName, int... indices)
        throws ClassCastException, IndexOutOfBoundsException;
      Object[] getArray(String memberName, int... indices)
        throws ClassCastException, IndexOutOfBoundsException;

      <T> T castMember(T sample, String memberName, int... indices);
        // casting Json member value or array element by sample
      <T> T castMember(Class <T> cls, String memberName, int... indices);
        // casting Json member value or array element by Class
        // see notes for a JSON.cast methods

      Json normalize() throws IOException, ParseException;
        // not required to generate JSON text

      String toString(); 
        // overridden. Returns JSON text as single line
      String toJSON();
        // stringify Json object as single line
      String toJSON(String memberName, int... indices); 
        // stringify member value or array element as single line
      Json toJSON(OutputStream outStream) throws IOException;
        // outStream is UTF-8 encoded single line JSON text


  Abstract class JsonObject;

    Java objects extender. Unload/load fields of a Java object to/from a Json object.
    - visibility of object fields as from the object constructor, except for private fields
    - Java transient fields are ignored;
    - Java final fields are unloaded, but not initialized at load;
    - the accessible fields of the object MUST be initialized;
    - see Json set/get/cast rules for Java object fields in the notes for Json object;
    - arrays of custom objects and collections MUST be managed using replacer/reviewer;
    - it is highly recommended to create a default constructor
 
    Constants:
      protected static final transient Object IGNORED; 
         // returns from replacer/reviver to skip the field

    Methods:
      Json toJson()
        throws IllegalArgumentException, IllegalAccessException;
         // returns a Json object from this object

      <T>T fromJson(Json jsonObj)
        throws IllegalArgumentException, IllegalAccessException;
         // loads Json to this object

      Json toJson(Object targetObj)   
        throws IllegalArgumentException, IllegalAccessException;
         // returns a Json object from the target object

      <T> T fromJson(T targetObj, Json json) 
        throws IllegalArgumentException, IllegalAccessException;
         // loads Json to target object

      protected Object replacer(String name, Object value);
        - applies on unloading; 
        - name is object field class and name delimitet with dot (.), value is object field value;
        - first call with the target object class name and the target object as the value;
        - returns Json-supported object or IGNORED

      protected Object reviver(String name, Object value);
        - applies on loading;
        - name is object field class and name delimitet with dot (.), value is Json-supported object
        - first call with the target object class name and Json object as value
        - returns a value that is compatible with the object field or IGNORED

      protected void onError(String name, Exception e);
        // default action: print exception message to System.err

      String toString();
        // overriden. Generate text in JSON format as a single line

      protected <T> T getTarget();
        // get target object. Accessible from replacer/reviver

      static boolean isClassName(String name);
      protected <T> T castMember(String memberName, Json jsonObj, T sample);
        // returns the sample if Json member does not exists or is null


  class JsonConverter extends JsonObject;
    
    Constructor:
      JsonConverter();

 
Usage see:  
  ./test/json/JsonTest.java  
  ./test/json/JsonCastTest.java  
  ./test/json/JsonObjectTest.java  
